//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendorSystem.Models.Model1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BayanEntities : DbContext
    {
        public BayanEntities()
            : base("name=BayanEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LockUp> LockUps { get; set; }
        public virtual DbSet<Notifcation> Notifcations { get; set; }
        public virtual DbSet<OrderManagementDetail> OrderManagementDetails { get; set; }
        public virtual DbSet<OrderManagementMaster> OrderManagementMasters { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PageVSRole> PageVSRoles { get; set; }
        public virtual DbSet<Replenish_Master> Replenish_Master { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Tbl_CalculationType> Tbl_CalculationType { get; set; }
        public virtual DbSet<Tbl_CentralizedLockUp> Tbl_CentralizedLockUp { get; set; }
        public virtual DbSet<Tbl_Company> Tbl_Company { get; set; }
        public virtual DbSet<Tbl_CustomerCompensationDetail> Tbl_CustomerCompensationDetail { get; set; }
        public virtual DbSet<Tbl_CustomerCompensationMstr> Tbl_CustomerCompensationMstr { get; set; }
        public virtual DbSet<Tbl_CustomerDtl> Tbl_CustomerDtl { get; set; }
        public virtual DbSet<Tbl_CustomerMaster> Tbl_CustomerMaster { get; set; }
        public virtual DbSet<Tbl_Distributor> Tbl_Distributor { get; set; }
        public virtual DbSet<Tbl_Jobs> Tbl_Jobs { get; set; }
        public virtual DbSet<Tbl_LastUpdateFromCenteralDB> Tbl_LastUpdateFromCenteralDB { get; set; }
        public virtual DbSet<Tbl_Product> Tbl_Product { get; set; }
        public virtual DbSet<Tbl_ProductAttribute> Tbl_ProductAttribute { get; set; }
        public virtual DbSet<Tbl_ProductVsDistributor> Tbl_ProductVsDistributor { get; set; }
        public virtual DbSet<Tbl_RepConfig_Mstr> Tbl_RepConfig_Mstr { get; set; }
        public virtual DbSet<Tbl_Route> Tbl_Route { get; set; }
        public virtual DbSet<Tbl_RouteCombinDtl> Tbl_RouteCombinDtl { get; set; }
        public virtual DbSet<Tbl_RouteCombinDtlCustomer> Tbl_RouteCombinDtlCustomer { get; set; }
        public virtual DbSet<Tbl_RouteCombinDtlFirstClass> Tbl_RouteCombinDtlFirstClass { get; set; }
        public virtual DbSet<Tbl_RouteCombinDtlSecondClass> Tbl_RouteCombinDtlSecondClass { get; set; }
        public virtual DbSet<Tbl_RouteCombinMaster> Tbl_RouteCombinMaster { get; set; }
        public virtual DbSet<Tbl_Rpt_CompensationDetail> Tbl_Rpt_CompensationDetail { get; set; }
        public virtual DbSet<Tbl_Rpt_CompensationMstr> Tbl_Rpt_CompensationMstr { get; set; }
        public virtual DbSet<Tbl_ScheduleType> Tbl_ScheduleType { get; set; }
        public virtual DbSet<Tbl_ShelfLife> Tbl_ShelfLife { get; set; }
        public virtual DbSet<Tbl_WeekDay> Tbl_WeekDay { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<V_GetActiveReplenishConfiguration> V_GetActiveReplenishConfiguration { get; set; }
        public virtual DbSet<V_GetAllCustomersVM> V_GetAllCustomersVM { get; set; }
        public virtual DbSet<V_GetAllDistributorsVM> V_GetAllDistributorsVM { get; set; }
        public virtual DbSet<V_GetAllRouteCombinationsVM> V_GetAllRouteCombinationsVM { get; set; }
        public virtual DbSet<V_GetAllRoutesVM> V_GetAllRoutesVM { get; set; }
        public virtual DbSet<V_GetCompensationData> V_GetCompensationData { get; set; }
        public virtual DbSet<V_GetProductCurrentStatus> V_GetProductCurrentStatus { get; set; }
        public virtual DbSet<V_GetRegionByRoutes> V_GetRegionByRoutes { get; set; }
        public virtual DbSet<V_ProductInternalCode> V_ProductInternalCode { get; set; }
        public virtual DbSet<Replenish_Details> Replenish_Details { get; set; }
        public virtual DbSet<V_Replenish_Results> V_Replenish_Results { get; set; }
        public virtual DbSet<Tbl_RepConfig_RepScheduleType> Tbl_RepConfig_RepScheduleType { get; set; }
        public virtual DbSet<Tbl_OrdConfig_VisitScheduleType> Tbl_OrdConfig_VisitScheduleType { get; set; }
        public virtual DbSet<Tbl_OrdConfig_Mstr> Tbl_OrdConfig_Mstr { get; set; }
        public virtual DbSet<Tbl_OrdConfigCustomer> Tbl_OrdConfigCustomer { get; set; }
    
        [DbFunction("BayanEntities", "Fun_GetAllocationData")]
        public virtual IQueryable<Fun_GetAllocationData_Result> Fun_GetAllocationData(Nullable<int> regionID, Nullable<int> territoryID, Nullable<int> routeID, Nullable<System.DateTime> expectedDeliveryDate, string vendor_CompanyID)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var expectedDeliveryDateParameter = expectedDeliveryDate.HasValue ?
                new ObjectParameter("ExpectedDeliveryDate", expectedDeliveryDate) :
                new ObjectParameter("ExpectedDeliveryDate", typeof(System.DateTime));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetAllocationData_Result>("[BayanEntities].[Fun_GetAllocationData](@RegionID, @TerritoryID, @RouteID, @ExpectedDeliveryDate, @Vendor_CompanyID)", regionIDParameter, territoryIDParameter, routeIDParameter, expectedDeliveryDateParameter, vendor_CompanyIDParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_GetAssingRoutesByCustID")]
        public virtual IQueryable<Fun_GetAssingRoutesByCustID_Result> Fun_GetAssingRoutesByCustID(Nullable<int> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetAssingRoutesByCustID_Result>("[BayanEntities].[Fun_GetAssingRoutesByCustID](@CustID)", custIDParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_GetOrdersQtyPerVisits")]
        public virtual IQueryable<Fun_GetOrdersQtyPerVisits_Result> Fun_GetOrdersQtyPerVisits(string barcode, string storeId, string companyID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string vendor_CompanyID)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var storeIdParameter = storeId != null ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetOrdersQtyPerVisits_Result>("[BayanEntities].[Fun_GetOrdersQtyPerVisits](@Barcode, @StoreId, @CompanyID, @DateFrom, @DateTo, @Vendor_CompanyID)", barcodeParameter, storeIdParameter, companyIDParameter, dateFromParameter, dateToParameter, vendor_CompanyIDParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_GetProductQty_Orders")]
        public virtual IQueryable<Fun_GetProductQty_Orders_Result> Fun_GetProductQty_Orders(Nullable<int> regionID, Nullable<int> territoryID, Nullable<int> routeID, Nullable<System.DateTime> expectedDeliveryDate, string vendor_CompanyID)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var expectedDeliveryDateParameter = expectedDeliveryDate.HasValue ?
                new ObjectParameter("ExpectedDeliveryDate", expectedDeliveryDate) :
                new ObjectParameter("ExpectedDeliveryDate", typeof(System.DateTime));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetProductQty_Orders_Result>("[BayanEntities].[Fun_GetProductQty_Orders](@RegionID, @TerritoryID, @RouteID, @ExpectedDeliveryDate, @Vendor_CompanyID)", regionIDParameter, territoryIDParameter, routeIDParameter, expectedDeliveryDateParameter, vendor_CompanyIDParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_GetRouteCombinationCurrentStatus")]
        public virtual IQueryable<Fun_GetRouteCombinationCurrentStatus_Result> Fun_GetRouteCombinationCurrentStatus(string vendorCompanyID)
        {
            var vendorCompanyIDParameter = vendorCompanyID != null ?
                new ObjectParameter("VendorCompanyID", vendorCompanyID) :
                new ObjectParameter("VendorCompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetRouteCombinationCurrentStatus_Result>("[BayanEntities].[Fun_GetRouteCombinationCurrentStatus](@VendorCompanyID)", vendorCompanyIDParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_PrintShippedOrder")]
        public virtual IQueryable<Fun_PrintShippedOrder_Result> Fun_PrintShippedOrder(Nullable<decimal> orderManagID, string vendor_CompanyID)
        {
            var orderManagIDParameter = orderManagID.HasValue ?
                new ObjectParameter("OrderManagID", orderManagID) :
                new ObjectParameter("OrderManagID", typeof(decimal));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_PrintShippedOrder_Result>("[BayanEntities].[Fun_PrintShippedOrder](@OrderManagID, @Vendor_CompanyID)", orderManagIDParameter, vendor_CompanyIDParameter);
        }
    
        public virtual int Proc_Calc_CustomerCompensation(Nullable<int> mastrID, Nullable<System.DateTime> dateTo)
        {
            var mastrIDParameter = mastrID.HasValue ?
                new ObjectParameter("MastrID", mastrID) :
                new ObjectParameter("MastrID", typeof(int));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Calc_CustomerCompensation", mastrIDParameter, dateToParameter);
        }
    
        public virtual int Proc_Calc_Rpt_Compensation(Nullable<int> mastrID, string vendor_CompanyID)
        {
            var mastrIDParameter = mastrID.HasValue ?
                new ObjectParameter("MastrID", mastrID) :
                new ObjectParameter("MastrID", typeof(int));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Calc_Rpt_Compensation", mastrIDParameter, vendor_CompanyIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetPageVsRole_Result> Proc_GetPageVsRole(Nullable<int> roleID, string vendor_CompanyID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetPageVsRole_Result>("Proc_GetPageVsRole", roleIDParameter, vendor_CompanyIDParameter);
        }
    
        public virtual int Proc_ReAllocateQty(Nullable<int> regionID, Nullable<int> territoryID, Nullable<int> routeID, Nullable<System.DateTime> expectedDeliveryDate, string vendor_CompanyID, string internalCode, string barocde, Nullable<decimal> totalShipped, Nullable<decimal> totalApproved)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var expectedDeliveryDateParameter = expectedDeliveryDate.HasValue ?
                new ObjectParameter("ExpectedDeliveryDate", expectedDeliveryDate) :
                new ObjectParameter("ExpectedDeliveryDate", typeof(System.DateTime));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            var internalCodeParameter = internalCode != null ?
                new ObjectParameter("InternalCode", internalCode) :
                new ObjectParameter("InternalCode", typeof(string));
    
            var barocdeParameter = barocde != null ?
                new ObjectParameter("Barocde", barocde) :
                new ObjectParameter("Barocde", typeof(string));
    
            var totalShippedParameter = totalShipped.HasValue ?
                new ObjectParameter("totalShipped", totalShipped) :
                new ObjectParameter("totalShipped", typeof(decimal));
    
            var totalApprovedParameter = totalApproved.HasValue ?
                new ObjectParameter("TotalApproved", totalApproved) :
                new ObjectParameter("TotalApproved", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_ReAllocateQty", regionIDParameter, territoryIDParameter, routeIDParameter, expectedDeliveryDateParameter, vendor_CompanyIDParameter, internalCodeParameter, barocdeParameter, totalShippedParameter, totalApprovedParameter);
        }
    
        public virtual int Proc_RemoveOld_Rpt_CompensationData(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_RemoveOld_Rpt_CompensationData", dateParameter);
        }
    
        public virtual int RemoveOldJobs(Nullable<System.DateTime> dateFrom)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveOldJobs", dateFromParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_GetOrderInvoiceMasterData")]
        public virtual IQueryable<Fun_GetOrderInvoiceMasterData_Result> Fun_GetOrderInvoiceMasterData(Nullable<decimal> orderManagID, string vendor_CompanyID)
        {
            var orderManagIDParameter = orderManagID.HasValue ?
                new ObjectParameter("OrderManagID", orderManagID) :
                new ObjectParameter("OrderManagID", typeof(decimal));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetOrderInvoiceMasterData_Result>("[BayanEntities].[Fun_GetOrderInvoiceMasterData](@OrderManagID, @Vendor_CompanyID)", orderManagIDParameter, vendor_CompanyIDParameter);
        }
    
        [DbFunction("BayanEntities", "Fun_GetReplenishmentReportData")]
        public virtual IQueryable<Fun_GetReplenishmentReportData_Result> Fun_GetReplenishmentReportData(Nullable<int> regionID, Nullable<int> territoryID, Nullable<int> routeID, Nullable<int> custDtlID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string vendor_CompanyID)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var custDtlIDParameter = custDtlID.HasValue ?
                new ObjectParameter("CustDtlID", custDtlID) :
                new ObjectParameter("CustDtlID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var vendor_CompanyIDParameter = vendor_CompanyID != null ?
                new ObjectParameter("Vendor_CompanyID", vendor_CompanyID) :
                new ObjectParameter("Vendor_CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetReplenishmentReportData_Result>("[BayanEntities].[Fun_GetReplenishmentReportData](@RegionID, @TerritoryID, @RouteID, @CustDtlID, @DateFrom, @DateTo, @Vendor_CompanyID)", regionIDParameter, territoryIDParameter, routeIDParameter, custDtlIDParameter, dateFromParameter, dateToParameter, vendor_CompanyIDParameter);
        }
    }
}
